
(cursor.getPosition().findIntersection(testSlime.getPosition())) easy collision

        /*
        if (dt >= 1.f)
        {
            std::cout << "Yay";
            dt = 0.f;
        }
        */



IMPLEMENT THIS FOR TIME
sf::Clock tickClock;  // Separate clock for ticks
int gameTicks = 0;    // The variable that counts ticks

const float TICK_DURATION = 1.0f / 30.0f;  // 30 ticks per second (every 1/30th of a second)

while (window.isOpen()) {
    // Check if it's time for a new tick
    if (tickClock.getElapsedTime().asSeconds() >= TICK_DURATION) {
        tickClock.restart();  // Reset the tickClock after every tick
        gameTicks++;          // Increment the tick counter

        // Do something after each tick (like check if it's time to cast a fireball)
        std::cout << "Tick: " << gameTicks << std::endl;
    }

    // other game logic
}








_________________________________________________

class Skeleton {
public:
	// Constructor takes a texture reference and initializes the sprite
	Skeleton(sf::Texture& texture);

	// Method to get the sprite
	sf::Sprite& getSprite();

private:
	sf::Sprite sprite;  // Sprite for the skeleton
};



class EntitySpawner
{
public:
	EntitySpawner();  // Constructor declaration
	void spawnSkeletons();  // Method declaration
	void drawSkeletons(sf::RenderWindow& window);  // Method to draw skeletons

private:
	sf::Texture skeletonTexture;  // Texture for the skeleton
	std::vector<std::unique_ptr<Skeleton>> skeletons;  // Vector of unique pointers to Skeleton
};

____________________________________________________________________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________________________________________________________________






 // Update the delta time
            Time dt = clock.restart();

			    // Update the total game time
            gameTimeTotal += dt;

			
            // Make a fraction of 1 from the delta time
            float dtAsSeconds = dt.asSeconds();


			// Update the player
            player.update(dtAsSeconds, Mouse::getPosition());

			 // We will call this function once every frame
    void update(float elapsedTime, Vector2i mousePosition);
			const float START_SPEED = 200;

			void Player::update(float elapsedTime, Vector2i mousePosition)
			 // Calculate the angle the player is facing
			  if (m_UpPressed)
    {
        m_Position.y -= m_Speed * elapsedTime;
    }
    if (m_DownPressed)
    {
        m_Position.y += m_Speed * elapsedTime;
    }
    if (m_RightPressed)
    {
        m_Position.x += m_Speed * elapsedTime;
    }
    if (m_LeftPressed)
    {
        m_Position.x -= m_Speed * elapsedTime;
    }
    m_Sprite.setPosition(m_Position);
    // Keep the player in the arena
    if (m_Position.x > m_Arena.width - m_TileSize)
    {
        m_Position.x = m_Arena.width - m_TileSize;
    }
    if (m_Position.x < m_Arena.left + m_TileSize)
    {
        m_Position.x = m_Arena.left + m_TileSize;
    }
    if (m_Position.y > m_Arena.height - m_TileSize)
    {
        m_Position.y = m_Arena.height - m_TileSize;
    }
    if (m_Position.y < m_Arena.top + m_TileSize)
    {
        m_Position.y = m_Arena.top + m_TileSize;
    }


    float angle = (atan2(mousePosition.y - m_Resolution.y / 2,
        mousePosition.x - m_Resolution.x / 2)
        * 180) / 3.141;


    m_Sprite.setRotation(angle);



